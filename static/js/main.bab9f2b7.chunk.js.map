{"version":3,"sources":["components/TodoApp/TodoApp.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","input","addTask","trim","props","setState","inputChange","event","target","value","handleSubmit","preventDefault","this","onSubmit","type","onChange","className","placeholder","Component","TodoItem","task","changeCondition","deleteTask","key","id","checked","completed","onClick","title","TodoList","tasks","map","TodosFilter","actualFilter","switchActiveTasks","href","App","tasksToShow","taskName","prevState","push","length","i","indexOf","splice","clearCompleted","filter","markAllAsCompleted","filterTasks","whichTasksToShow","filterName","visibleTasks","disabled","t","htmlFor","hidden","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bab9f2b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nclass TodoApp extends Component {\n  state = {\n    input: '',\n  };\n\n  addTask = () => {\n    const { input } = this.state;\n\n    if (input.trim()) {\n      this.props.addTask(input);\n      this.setState({ input: '' });\n    }\n  }\n\n  inputChange = event => this.setState({ input: event.target.value });\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.addTask();\n  }\n\n  render() {\n    const { input } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={this.inputChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addTask: propTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport './TodoItem.css';\n\nconst TodoItem = ({ task, changeCondition, deleteTask }) => (\n  <li\n    key={task.id}\n\n  >\n    <div className=\"view\">\n      <input\n\n        type=\"checkbox\"\n        className=\"toggle\"\n        checked={task.completed}\n        id={task.id}\n        onClick={() => changeCondition(task.id)}\n      />\n\n      <label\n        className={task.completed\n          ? 'complete'\n          : 'inProgress'}\n      >\n        {task.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTask(task.id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  task: propTypes.objectOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n  changeCondition: propTypes.func.isRequired,\n  deleteTask: propTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList = ({ tasks, changeCondition, deleteTask }) => (\n  <ul className=\"todo-list\">\n    {tasks.map(task => (\n      <TodoItem\n        task={task}\n        changeCondition={changeCondition}\n        deleteTask={deleteTask}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  changeCondition: propTypes.func.isRequired,\n  deleteTask: propTypes.func.isRequired,\n  tasks: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst TodosFilter = ({ actualFilter, switchActiveTasks }) => (\n  <li>\n    <a\n      href={`#/${actualFilter}`}\n      onClick={() => switchActiveTasks(actualFilter)}\n    >\n      {actualFilter}\n    </a>\n  </li>\n);\n\nTodosFilter.propTypes = {\n  actualFilter: propTypes.string.isRequired,\n  switchActiveTasks: propTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React, { Component } from 'react';\nimport TodoApp from './components/TodoApp/TodoApp';\nimport TodoList from './components/TodoList/TodoList';\nimport TodosFilter from './components/TodosFilter/TodosFilter';\n\nclass App extends Component {\n  state = {\n    tasks: [],\n    tasksToShow: 'all',\n  }\n\n  addTask = (taskName) => {\n    this.setState((prevState) => {\n      const { tasks } = prevState;\n\n      tasks.push({\n        id: tasks.length + 1,\n        title: taskName,\n        completed: false,\n      });\n\n      return tasks;\n    });\n  };\n\n  changeCondition = (id) => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id === id) {\n          return {\n            ...task,\n            completed: !task.completed,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  };\n\n  deleteTask = (id) => {\n    const i = this.state.tasks.map(task => task.id).indexOf(id);\n\n    this.setState((prevState) => {\n      const { tasks } = prevState;\n\n      return tasks.splice(i, 1);\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.completed === false),\n    }));\n  }\n\n  markAllAsCompleted= () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map(task => ({\n        ...task,\n        completed: true,\n      })),\n    }));\n  }\n\n  filterTasks = (whichTasksToShow) => {\n    const { tasks } = this.state;\n\n    switch (whichTasksToShow) {\n      case 'active':\n        return tasks.filter(task => !task.completed);\n\n      case 'completed':\n        return tasks.filter(task => task.completed);\n\n      default:\n        return tasks;\n    }\n  }\n\n  switchActiveTasks = (filterName) => {\n    this.setState({ tasksToShow: filterName });\n  }\n\n  render() {\n    const { tasks, tasksToShow } = this.state;\n    const visibleTasks = this.filterTasks(tasksToShow);\n    const filerNames = ['all', 'active', 'completed'];\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <TodoApp addTask={this.addTask} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            disabled={!tasks.filter(\n              t => t.completed === false,\n            )\n              .length}\n            onClick={this.markAllAsCompleted}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            tasks={visibleTasks}\n            changeCondition={this.changeCondition}\n            deleteTask={this.deleteTask}\n          />\n        </section>\n\n        <footer className=\"footer\" hidden={!tasks.length}>\n          <span className=\"todo-count\">\n            {tasks.filter(t => t.completed === false).length}\n            <span>  items left</span>\n\n          </span>\n\n          <ul className=\"filters\">\n            {filerNames.map(filter => (\n              <TodosFilter\n                tasksToShow={tasksToShow}\n                key={filter}\n                actualFilter={filter}\n                switchActiveTasks={this.switchActiveTasks}\n              />\n            ))}\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}